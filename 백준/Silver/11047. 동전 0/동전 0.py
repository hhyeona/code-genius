'''
동전 0

가지고 있는 동전 총 N 종류,
각각의 동전을 매우 많이 가지고 있음.

적절히 사용해서 합을 K로 만들 것임.

이때, 필요한 동전의 개수 최솟값을 구함.

1<= N <= 10, 1<= K <= 1억

N 개 줄에 동전 가치 Ai가 오름차순으로 주어짐. (가치 :백만 이하)
( 1 <= Ai <= 백만, A1 = 1, i>= 2 인 경우,
Ai 는 Ai-1 의 배수 ) => 즉, 큰 동전이 전부 작은 동전의 배수가 된다는 뜻.

1. 가장 큰 동전부터 해서 몫을 카운트 하고, 나머지 동전을 내림차순으로 반복.
그리디.
-> 각 단계에서 최적이라고 생각되는 것을 선택해 나가는 방식. (근사한 값 목표)
1.탐욕 선택 속성 : 각 단계에서 최선의 선택을 했을 때,
전체 문제에 대한 최적해를 구할 수 있는 경우. (즉, 각 단계에서 이상적인 것이 전체 최적의 결과 도출한다는 것)

2. 최적 부분 구조 : 전체 문제의 최적해가 '부분 문제의 최적해로 구성' 될 수 있는 경우.

위 두가지를 조건을 충족해야 그리디 적용 가능.

만약, 800원의 가치인데 500,400,100 이런 식으로 주어진 경우 그리디는 안됨.

## 각각의 동전을 많이 가지고 있다는 게 포인트.
'''
import sys
input = sys.stdin.readline

lst = []
n,k = map(int,input().split())
for _ in range(n):
    lst.append(int(input().strip()))

cnt = 0
lst.sort(reverse=True) # 높은 순.

for i in lst:
    if i <= k:   # 목표 금액 보다 작은 것 중에 젤 큰 것부터.
        cnt += k // i   # 나눈 몫을 cnt 함.
        k = k%i  # 위에 계산 값을 뺀 나머지를 다시 k로 둠.
        if k == 0:
            break
print(cnt)